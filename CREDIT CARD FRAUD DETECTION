import pandas as pd

# Loading the dataset
df = pd.read_csv("creditcard.csv")


# Exploring data
df.head()
print(df.info())
print(df.isnull().sum())
print(df["Class"].value_counts())
print(df.corr())


# Since fraud cases are rare, I used SMOTE to balance the dataset.

from imblearn.over_sampling import SMOTE

X = df.drop(columns=["Class"])  # Features
y = df["Class"]  # Target (Fraud: 1, Genuine: 0)

# Apply SMOTE
smote = SMOTE(sampling_strategy=0.5, random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)


# Preprocessing
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

scaler = StandardScaler()
X_resampled = scaler.fit_transform(X_resampled)

X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)


# Training model

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Making predictions
y_pred = model.predict(X_test)

# Evaluating model performance
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))


# Predicting Sales for New Data
new_transaction = pd.DataFrame([X_test[0]])  # Example test data
prediction = model.predict(new_transaction)
print("Fraudulent Transaction Detected" if prediction[0] == 1 else "Legitimate Transaction")






